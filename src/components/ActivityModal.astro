---
export interface Props {
    id: string;
    title: string;
    pillar: string;
}

const { id, title, pillar } = Astro.props;
---

<div id={id} class="modal-overlay" aria-hidden="true">
    <div class="modal-container">
        <div class="modal-header">
            <h3 class="modal-title">{title}</h3>
            <button class="modal-close" aria-label="Close modal">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
        </div>
        <div class="modal-body">
            <slot />
        </div>
        <div class="modal-footer">
            <a href="/resources" class="modal-cta">
                Explore all {pillar} resources â†’
            </a>
        </div>
    </div>
</div>

<style>
.modal-overlay {
    @apply fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4;
    display: none;
}

.modal-overlay.active {
    display: flex;
}

.modal-container {
    @apply bg-theme-dark rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden;
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalSlideIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.modal-header {
    @apply flex items-center justify-between p-6 border-b border-white/10;
}

.modal-title {
    @apply text-2xl font-bold text-white;
}

.modal-close {
    @apply p-2 rounded-lg hover:bg-white/10 transition-colors text-white;
}

.modal-body {
    @apply p-6;
}

.modal-footer {
    @apply p-6 border-t border-white/10 text-center;
}

.modal-cta {
    @apply inline-flex items-center text-theme-secondary font-semibold hover:gap-3 transition-all;
    gap: 0.5rem;
}
</style>

<script>
    // Modal functionality
    document.addEventListener('DOMContentLoaded', () => {
        const modalOverlays = document.querySelectorAll('.modal-overlay');
        
        modalOverlays.forEach(modal => {
            const closeBtn = modal.querySelector('.modal-close');
            
            // Close on button click
            closeBtn?.addEventListener('click', () => {
                modal.classList.remove('active');
                document.body.style.overflow = '';
            });
            
            // Close on overlay click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                    document.body.style.overflow = '';
                }
            });
        });
        
        // Open modal function
        window.openActivityModal = (modalId) => {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            }
        };
    });
</script> 